<!doctype html>
<html>
  <head>
    <title>Nim Forum</title>
    <link rel="stylesheet" href="site.css">
    <link rel="shortcut icon" href="favicon.ico">
  </head>
  <body>
    
    <!--- #head --->
    <header id="head" class="forum">
      <div class="wide-layout tall">
        <div id="head-logo"></div>
        <a id="head-logo-link" href="home.htm"></a>
        <nav id="head-links">
          <a href="home.htm">home</a>
          <a href="docs.htm">docs</a>
          <a href="learn.htm">learn</a>
          <a href="forum.htm" class="active">forum</a>
          <a href="#">download</a>
          <a href="#">faq</a>
        </nav>
      </div>
    </header>
    
    <!--- #neck --->
    <section id="neck">
      <div class="wide-layout tall">
        <div id="glow-arrow" class="forum"></div>
      </div>
    </section>
    
    <!--- #body --->
    <section id="body" class="forum">
      <div id="body-border"></div>
      <div id="body-border-left"></div>
      <div id="body-border-right"></div>
      <div id="body-border-bottom"></div>
      <div id="glow-line"></div>
      <div id="glow-line-bottom"></div>
      <div class="talk-layout">
        <article id="content">
          <div id="talk-head">
            <div class="info"><div><a href="forum.htm"><b>forum index</b></a> > <a href="#">Cannot generate code for N (static[int]) in template</a></div></div>
            <div class="user detail"><div><div>135</div></div><div><div>8</div></div></div>
          </div>
          <div id="talk-thread">
            <div>
              <div class="topic"><div>
                <p>In the following (simplified) code, I am running into a problem when trying to support</p>
<pre>
v *= <span class="val">4.0</span>
</pre>
                <p>where v is an N-dimensional vector consisting of scalars of type T. I want to parametrize the `*=` method in terms of T, but nimrod complains about my definition below:</p>
<pre>
tmp.nim(7, 44) Error: internal error: cannot generate code for: N
</pre>
                <p>I would appreciate an explanation of the error and how to write the code to do what I want here.</p>
<pre>
<span class="kwd">type</span> <span class="def">TVec</span>* <span class="prg">{.pure, final.}</span>[T; N: <span class="typ">static</span>[<span class="typ">int</span>]] = <span class="typ">object</span>
<span class="tab end">  </span>vec: <span class="typ">array</span>[<span class="val">0</span>..N-<span class="val">1</span>, T]

<span class="kwd">proc</span> <span class="def">vec2</span>*[T](ary: <span class="typ">array</span>[0..<span class="val">1</span>, T]): <span class="typ">TVec</span>[T,<span class="val">2</span>] <span class="prg">{.inline.}</span> =
<span class="tab end">  </span>result.vec = ary

<span class="kwd">proc</span> <span class="def">`*=`</span>*[T; N: <span class="typ">static</span>[<span class="typ">int</span>]](v: <span class="kwd">var</span> <span class="typ">TVec</span>[T,N], c: T) <span class="prg">{.inline.}</span> =
<span class="tab">  </span><span class="kwd">for</span> i <span class="kwd">in</span> <span class="val">0</span>..N-<span class="val">1</span>:
<span class="tab end">  </span><span class="tab">  </span>v.vec[i] *= c

<span class="kwd">when</span> isMainModule:
<span class="tab">  </span><span class="kwd">import</span> unittest
<span class="tab">  </span>
<span class="tab">  </span>test <span class="val">"vector-scalar arithmetic operators"</span>:
<span class="tab">  </span><span class="tab">  </span><span class="kwd">var</span> a = vec2([<span class="val">1.0</span>, <span class="val">2.0</span>])
<span class="tab">  </span><span class="tab">  </span>a *= <span class="val">4.0</span>
<span class="tab end">  </span><span class="tab">  </span>check(a.vec == [<span class="val">4.0</span>, <span class="val">8.0</span>])
</pre>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=80&d=identicon"></div>
                  <a class="name" href="#">marcianx</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p>static[X] is known to have bugs. In particular, when calling *=, the value of N is not properly usable inside the procedure body (it works for the argument types, though). You can work around it by writing:</p>
<pre>
proc `*=`*[T; N: static[int]](v: var TVec[T,N], c: T) {.inline.} =
  for i in 0..len(v.vec)-1:
    v.vec[i] *= c
</pre>
                <p>Independently of that issue, you will also need to change the let in the test to var, since *= will modify a.</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/407fc413e076908ca9a12df6cdf981ba?s=80&d=identicon"></div>
                  <a class="name" href="#">Jehan</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p>Thanks Jehan, but the error happens before it even gets to that stage. The line and column number of the error is pointing to the N in "var TVec[T,N]". Even with your fix, the error remains.</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=80&d=identicon"></div>
                  <a class="name" href="#">marcianx</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p>In a similar vein, I wanted to do</p>
<pre>
proc vecn*[T; N: static[int]](ary: array[0..(N-1), T]): TVec[T,N] {.inline.} =
  result.vec = ary
...
when isMainModule:
  import unittest
  
  test "constructors":
    let a = vecn([1.0, 2.0])
</pre>
                <p>to have a general-purpose constructor. I suppose this runs into the same types of bugs? The error I get is</p>
<pre>
vec.nim(5, 46) Error: ordinal type expected
</pre>
                <p>pointing to the "N" in "array[0..(N-1), T]".</p>
                <p>Any insights as to what is currently missing with the handling of static[int]? And what it would take to fix it? Should code written now generally avoid static[int]? I can, of course, do this without the static[int] and manually initialize all instances of the template I need in any program by</p>
                <ol>
                  <li>wrapping all procs in a template that takes the dimension (N) as a parameter, and</li>
                  <li>invoking the template to define the procs for the versions of N that I actually happen to use in my particular program.</li>
                </ol>
                <p>But that's no fun. :P</p>
                <p>The reason is I am playing with some basic types in a fully-generic sense is to gather whether it makes sense to port a particular template-heavy geometric data structure to nim(rod) at this time.</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=80&d=identicon"></div>
                  <a class="name" href="#">marcianx</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p><b>marcianx:</b> Even with your fix, the error remains.</p>
                <p>I forgot to mention that you also need to remove the : static[int] constraint from the procedure definition. In short, use static[int] for type declarations, but not for proc declarations.</p>
                <p>Still with the caveat that, as the manual says, the static[int] implementation is incomplete. I'm afraid that I haven't dug deeply enough into the compiler to understand what exactly is missing and how stable the existing functionality is.</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/407fc413e076908ca9a12df6cdf981ba?s=80&d=identicon"></div>
                  <a class="name" href="#">Jehan</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p>I posted on the other post regarding static[int] and I can confirm that it is /not/ stable. Also it looks like marcianx is trying to make a linear algebra library, both me and BitPuffin have attempted linear algebra libraries using static[int] and it just is not stable enough at this point to use. I ended up using static int but not using overloading and having separate functions for each size as a stopgap until it is fixed. Unfortunately this does mean that for the time being nimrod can not do some of the things that C++ programmers are used to (static params and variadic generics), eventually static will get fixed and I hear that you can do variadic params with macros, although I do not really understand how, someone should write a blog post.</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/5a112c8298bcdd826741ad29804adc95?s=80&d=identicon"></div>
                  <a class="name" href="#">Demos</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p>Thank you both for the information.</p>
                <p><b>Jehan:</b> Thanks for removing static[int] from the proc did the trick for the time being as long as I could avoid using N within the body or the function signature, which is not always possible. What would it take to get something like the following working? (It doesn't work currently, though I can use TVec.T within the function body just fine.) Another thing that worked beautifully was</p>
<pre>
proc `*=`*(v: var TVec, c: TVec.T) {.inline.} =
  for i in 0..len(v.vec)-1:
    v.vec[i] *= c
</pre>
                <p>My previous attempts at this had failed because I was still using TVec.N within the body and ran into incomprehensible static[int]-related errors. Unfortunately, I don't know how to write the vecn* function above without referencing N.</p>
                <p><b>Demos:</b> This was less about writing a linear algebra library (these are just static vectors, not dynamic ones) than about testing the macro system to see whether I would be able to port a much more complex C++ geometric library. I guess I will see how far I can get around the limitations for the time being.</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=80&d=identicon"></div>
                  <a class="name" href="#">marcianx</a>
                </div>
              </div>
            </div>
            <div>
              <div class="topic"><div>
                <p>Actually, further questions about the shorter version above. The following from above works fine</p>
<pre>
proc `*=`*(v: var TVec, c: TVec.T) {.inline.} =
  for i in 0..len(v.vec)-1:
    `*=`(v.vec[i], c)
</pre>
                <p>But if I try to make it more generic as follows using a template</p>
<pre>
template defineVectorScalarOperatorAssignment(op: expr) {.immediate.} =
  proc op*(v: var TVec, c: TVec.T) {.inline.} =
    for i in 0..len(v.vec)-1:
      op(v.vec[i], c)
</pre>
                <p>Then I get a compiler error</p>
<pre>
Error: undeclared identifier: 'T'
</pre>
                <p>pointing to the T in "c: TVec.T". Why might this be?</p>
              </div></div>
              <div class="author">
                <div>
                  <div class="avatar"><img src="http://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=80&d=identicon"></div>
                  <a class="name" href="#">marcianx</a>
                </div>
              </div>
            </div>
          </div>
          <div id="talk-info">
            <div class="info"><div>Pages 1 <a href="#">2</a> <a href="#">3</a></div></div>
            <div class="user"><div><a class="reply" href="#">Reply</a></div></div>
          </div>
        </article>
      </div>
    </section>
    
    <!--- #foot --->
    <footer id="foot" class="forum">
      <div class="talk-layout tall">
        <div id="foot-links">
          <div>
            <h4>Documentation</h4>
            <a href="docs.htm">Stable Documentation</a>
            <a href="docs.htm">Development Documentation</a>
            <a href="https://github.com/Araq/Nimrod">Github Issues &amp; Requests</a>
          </div>
          <div>
            <h4>Community</h4>
            <a href="forum.htm">User Forum</a>
            <a href="http://webchat.freenode.net/?channels=nimlang">Online IRC</a>
            <a href="http://build.nimrod-lang.org/irclogs/">IRC Logs</a>
          </div>
        </div>
        <div id="foot-legal">
          <h4>Written in Nim - Powered by <a href="#">Jester</a></h4>
          Web Design by <a href="#">Philip Witte</a> &amp; <a href="#">Dominik Picheta</a><br>
          Copyright &copy; 2014 - <a href="#">Andreas Rumpf</a> &amp; <a href="#">Contributors</a>
        </div>
      </div>
    </footer>
    
    <script src="arrow.js"></script>
    <script src="forum.js"></script>
    
  </body>
</html>